
const Alexa = require('ask-sdk-core');
const Jenkins = require('jenkins')({ baseUrl: 'http://user:bitnami@3.90.8.63:80/jenkins', crumbIssuer: true });
//const persistenceAdapter = require('ask-sdk-s3-persistence-adapter');

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
    },
    handle(handlerInput) {
        const speakOutput = 'Hallo, ich bin dein deployment helfer. Was kann ich für dich tun?';
        const repromptText = 'du kannst mich bitten ein projekt bereitzustellen oder den status eines Projekts abfragen.'; 
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(repromptText)
            .getResponse();
    }
};

/*const handler1 = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'IntentName';
    },
    async handle(handlerInput) {        
        const speakOutput = '';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};*/

const deployHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'deploy';
    },
    async handle(handlerInput) {     
        let projectName = handlerInput.requestEnvelope.request.intent.slots.project.value
        projectName = await replaceMinus( projectName )
        
        let speakOutput = await deployHandlerHelper( projectName )
        
        console.log( speakOutput )
        const repromtOutput = ``
       // const successMsg = `Thank you for waiting. The project ${projectName} was successfully deployed.`
       // const failMsg = `Sorry. The project ${projectName} failed. Please check your settings in your jenkins log for more details.` 
        return handlerInput.responseBuilder
            .speak(speakOutput)
            //.reprompt(repromtOutput)
            .getResponse();
    }
}

const getLastBuildStatus = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'lastBuildStatus';
    },
    async handle(handlerInput) {
        let projectName = handlerInput.requestEnvelope.request.intent.slots.project.value    
        projectName = await replaceMinus( projectName )    
        let speakOutput = await statusUpdateHelper( projectName );
        

        return handlerInput.responseBuilder
            .speak(speakOutput)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};

/*
const HelpIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'You can say hello to me! How can I help?';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && (Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.CancelIntent'
                || Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speakOutput = 'Goodbye!';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse();
    }
};
*/

const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        console.log(`~~~~ Error handled: ${error.stack}`);
        const speakOutput = `Entschuldigung, ich konnte deine Anfrage nicht richtig verstehen.`;

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

/*
Helpers
*/

const deployHandlerHelper = ( p_sProjectName ) => {
    let projectName = p_sProjectName
    let speakOutput = null
    let deployNo = null
    
    return new Promise((resolve, reject) => {
        Jenkins.job.exists( p_sProjectName, (err, exists) => {
            if( exists ){
                Jenkins.job.build( projectName, function( err, data ){
                    if (err) speakOutput = `Entschuldigung, bei der Abfrage des Status für den Auftrag ${projectName} ist ein Fehler aufgetreten.`;
                    deployNo = data
                    speakOutput = `ok, ich habe das projekt ${projectName} gebaut. die build nummer ist ${deployNo}.`;
                    resolve(speakOutput)

                })
            }else{
                speakOutput = `Entschuldigung, ich habe das Projekt ${projectName} nicht gefunden.`
                resolve(speakOutput) 

            }
        })
    })
        
}

const statusUpdateHelper = ( p_sProjectName ) => {
    let projectName = p_sProjectName
    let speakOutput = null
    let deployNo = null

    return new Promise((resolve, reject) => {
        Jenkins.job.exists( p_sProjectName, (err, exists) => {
            if( exists ){
                Jenkins.job.get( projectName, function(err, data) {
                    if (err) speakOutput = `Entschuldigung, bei der Abfrage des Status für den Auftrag ${projectName} ist ein Fehler aufgetreten.`;
                    
                    if( data.lastBuild.number == data.lastSuccessfulBuild.number ){
                        speakOutput = `Dein letzter build von ${projectName} war erfolgreich.`;  
                    }else{
                        speakOutput = `Der letzte build war nicht erfolgreich. Der letzte erfolgreiche build hatte die nummer ${data.lastSuccessfulBuild.number}. `
                    }
                    resolve(speakOutput)
                });
            }else{
                speakOutput = `Entschuldigung, ich habe das Projekt ${projectName} nicht gefunden.`
                resolve(speakOutput) 

            }
        })
    })
}

const replaceMinus = async ( p_sProjectName ) => {
    let projectName = p_sProjectName

    if( projectName.includes( ' minus ' )){
            projectName = projectName.split( ' minus ' )
            projectName = projectName.join( '-' )
    }

    return projectName;
}

// The SkillBuilder acts as the entry point for your skill, routing all request and response
// payloads to the handlers above. Make sure any new handlers or interceptors you've
// defined are included below. The order matters - they're processed top to bottom.
exports.handler = Alexa.SkillBuilders.custom()
    /*.withPersistenceAdapter(
        new persistenceAdapter.S3PersistenceAdapter({bucketName:process.env.S3_PERSISTENCE_BUCKET})
    )*/
    .addRequestHandlers(
        LaunchRequestHandler,
        deployHandler,
        
    )
    .addErrorHandlers(
        ErrorHandler
    )
    .lambda();
